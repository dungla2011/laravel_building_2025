@extends('guide.layout-simple')

@section('title', 'Users API Documentation')

@section('content')
<div class="row">
    <!-- Sidebar Navigation -->
    <div class="col-lg-3">
        <div class="sidebar">
            <h5 class="mb-3">Users API</h5>
            <nav class="nav flex-column" id="apiNav">
                <!-- Navigation will be generated by JavaScript -->
            </nav>
            
            <hr class="my-4">
            
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h6 class="mb-0">Permissions & Roles</h6>
                <a href="{{ route('guide.api.users.roles-permissions') }}" target="_blank" class="btn btn-sm btn-outline-primary" title="View JSON">
                    <i class="bi bi-filetype-json"></i>
                </a>
            </div>
            
            <div class="mb-3">
                <h6 class="small text-uppercase text-muted mb-2">Available Permissions</h6>
                @foreach($permissions as $permission)
                <div class="mb-1">
                    <span class="permission-badge ">
                    {{ $permission->name }}
                </span>
                    <div class="small text-muted">{{ $permission->description }}</div>
                </div>
                @endforeach
            </div>
            
            <div>
                <hr>    
                <h6 class="small text-uppercase text-muted mb-2">Roles</h6>
                @foreach($roles as $role)
                <div class="mb-2">
                    <div>
                    <b>
                    {{ $role->display_name }}
</b>
                    </div>
                    <div class="small text-muted">{{ $role->description }}</div>
                    <div class="mt-1">
                        @foreach($role->permissions as $permission)
                        <span class="badge bg-light text-dark me-1" style="font-size: 0.7rem;">{{ $permission->action }}</span>
                        @endforeach
                    </div>
                </div>
                @endforeach
            </div>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="col-lg-9">
        <!-- Header -->
        <div class="mb-4">
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <h1 class="h3">Users API Documentation</h1>
                    <p class="text-muted mb-0">
                        Laravel Orion Users API reference with interactive testing.
                    </p>
                </div>
                <div class="text-end">
                    <a href="{{ route('guide.api.users.roles-permissions') }}" target="_blank" class="btn btn-primary btn-sm me-2">
                        <i class="bi bi-people-fill"></i> Roles & Permissions
                    </a>
                    <a href="{{ route('guide.api.json') }}" class="btn btn-outline-primary btn-sm me-2">
                        <i class="bi bi-code-square"></i> JSON API Specs
                    </a>
                    <a href="{{ route('guide.api.users.openapi') }}" target="_blank" class="btn btn-outline-secondary btn-sm">
                        <i class="bi bi-download"></i> Users OpenAPI JSON
                    </a>
                </div>
            </div>
        </div>

        <!-- Authentication Info -->
        <div class="auth-section">
            <h5>Authentication Required</h5>
            <p class="mb-3">
                All endpoints require authentication. Include your token in the Authorization header:
            </p>
            <div class="endpoint-url">
                Authorization: Bearer YOUR_TOKEN_HERE
            </div>
            <div class="mt-3">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Test Users Available:</h6>
                        <ul class="mb-0">
                            <li><strong>Super Admin:</strong> superadmin@example.com / password</li>
                            <li><strong>Admin:</strong> admin@example.com / password</li>
                            <li><strong>Editor:</strong> editor@example.com / password</li>
                            <li><strong>Viewer:</strong> viewer@example.com / password</li>
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <h6>Role Permissions:</h6>
                        <div class="small text-muted">
                            <div><strong>Super Admin:</strong> All operations</div>
                            <div><strong>Admin:</strong> Create, Read, Update, Delete</div>
                            <div><strong>Editor:</strong> Read, Update only</div>
                            <div><strong>Viewer:</strong> Read only</div>
                            <div class="mt-2">
                                <a href="{{ route('guide.api.users.roles-permissions') }}" target="_blank" class="btn btn-outline-info btn-xs">
                                    <i class="bi bi-info-circle"></i> View detailed permissions JSON
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- JSON API Info -->
        <div class="alert alert-info" role="alert">
            <div class="d-flex">
                <div class="me-3">
                    <i class="bi bi-lightbulb-fill"></i>
                </div>
                <div>
                    <strong>Machine-readable API Documentation:</strong> 
                    All API endpoints, roles, and permissions are available in JSON format for automated integration. 
                    <a href="{{ route('guide.api.json') }}" class="alert-link">View all JSON endpoints â†’</a>
                </div>
            </div>
        </div>

        <!-- Authentication Testing -->
        <div class="api-card">
            <div class="card-body">
                <h5 class="card-title">Get Authentication Token</h5>
                <p class="text-muted">Login to get your API token for testing:</p>
                
                <form id="loginForm" onsubmit="event.preventDefault(); getAuthToken();">
                    <div class="row g-3 mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Email</label>
                            <select class="form-select" id="loginEmail">
                                <option value="superadmin@example.com">Super Admin</option>
                                <option value="admin@example.com">Admin</option>
                                <option value="editor@example.com">Editor</option>
                                <option value="viewer@example.com">Viewer</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Password</label>
                            <input type="password" class="form-control" id="loginPassword" value="password">
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <span class="spinner-border spinner-border-sm loading-spinner"></span>
                        Get Token
                    </button>
                </form>
                
                <div class="mt-3" id="tokenResult" style="display: none;">
                    <label class="form-label">Your API Token:</label>
                    <div class="input-group">
                        <input type="text" class="form-control" id="apiToken" readonly>
                        <button class="btn btn-outline-secondary" onclick="copyToken()">Copy</button>
                    </div>
                    <div class="small text-success mt-1">Token copied to all test sections below!</div>
                </div>
            </div>
        </div>

        <!-- API Endpoints -->
        <div id="apiEndpoints">
            <!-- Endpoints will be loaded here by JavaScript -->
        </div>

        <!-- Base URL Info -->
        <div class="api-card">
            <div class="card-body">
                <h5 class="card-title">Base Information</h5>
                <div class="row">
                    <div class="col-md-6">
                        <h6>Base URL</h6>
                        <div class="endpoint-url">{{ url('/api') }}</div>
                    </div>
                    <div class="col-md-6">
                        <h6>Content Type</h6>
                        <div class="endpoint-url">application/json</div>
                    </div>
                </div>
                
                <div class="mt-4">
                    <h6>Common Response Codes</h6>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="d-flex align-items-center mb-2">
                                <span class="status-indicator status-200"></span>
                                <code>200</code> <span class="ms-2">Success</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="status-indicator status-201"></span>
                                <code>201</code> <span class="ms-2">Created</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="status-indicator status-400"></span>
                                <code>400</code> <span class="ms-2">Bad Request</span>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex align-items-center mb-2">
                                <span class="status-indicator status-401"></span>
                                <code>401</code> <span class="ms-2">Unauthorized</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="status-indicator status-404"></span>
                                <code>404</code> <span class="ms-2">Not Found</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="status-indicator status-422"></span>
                                <code>422</code> <span class="ms-2">Validation Error</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@endsection

@push('scripts')
<script>
let currentToken = null;
let endpoints = [];

// Load API endpoints data
document.addEventListener('DOMContentLoaded', async function() {
    try {
        const response = await axios.get('{{ route("guide.api.users.data") }}');
        // Handle new data structure - endpoints are now in response.data.endpoints
        const data = response.data;
        endpoints = data.endpoints || data; // Get endpoints from new structure
        
        if (!Array.isArray(endpoints)) {
            console.error('Invalid endpoints data structure:', endpoints);
            return;
        }
        
        renderNavigation();
        renderEndpoints();
    } catch (error) {
        console.error('Failed to load API endpoints:', error);
        // Show error message to user
        document.getElementById('apiEndpoints').innerHTML = `
            <div class="alert alert-danger" role="alert">
                <h5>Failed to load API endpoints</h5>
                <p>There was an error loading the API documentation. Please check the console for details.</p>
                <small class="text-muted">Error: ${error.message}</small>
            </div>
        `;
    }
});

// Generate navigation
function renderNavigation() {
    const nav = document.getElementById('apiNav');
    nav.innerHTML = endpoints.map((endpoint, index) => `
        <a class="nav-link" href="#endpoint-${index}">
            <span class="method-badge method-${endpoint.method.toLowerCase()} me-2">${endpoint.method}</span>
            ${endpoint.title}
        </a>
    `).join('');
}

// Generate endpoint documentation
function renderEndpoints() {
    const container = document.getElementById('apiEndpoints');
    container.innerHTML = endpoints.map((endpoint, index) => `
        <div class="api-card" id="endpoint-${index}">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-start mb-3">
                    <div>
                        <h4 class="card-title mb-2">
                            <span class="method-badge method-${endpoint.method.toLowerCase()} me-3">${endpoint.method}</span>
                            ${endpoint.title}
                        </h4>
                        <div class="endpoint-url mb-2">${endpoint.url}</div>
                        <p class="text-muted mb-2">${endpoint.description}</p>
                        <span class="permission-badge">
                            Requires: ${endpoint.permission}
                        </span>
                    </div>
                </div>

                <!-- Parameters -->
                ${endpoint.parameters && endpoint.parameters.length > 0 ? `
                <h6 class="mb-3">Parameters</h6>
                <div class="table-responsive mb-4">
                    <table class="table parameter-table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Type</th>
                                <th>Required</th>
                                <th>Description</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${endpoint.parameters.map(param => `
                                <tr>
                                    <td><code>${param.name}</code></td>
                                    <td><code>${param.type}</code></td>
                                    <td>
                                        <span class="${param.required ? 'required-badge' : 'optional-badge'}">
                                            ${param.required ? 'Required' : 'Optional'}
                                        </span>
                                    </td>
                                    <td>${param.description}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
                ` : ''}

                <!-- Request Example -->
                ${endpoint.request_example ? `
                <h6 class="mb-3">Request Example</h6>
                <pre><code class="language-json">${formatJson(endpoint.request_example)}</code></pre>
                ` : ''}

                <!-- Response Example -->
                ${endpoint.response_example ? `
                <h6 class="mb-3">Response Example</h6>
                <pre><code class="language-json">${formatJson(endpoint.response_example)}</code></pre>
                ` : ''}

                <!-- Interactive Testing -->
                <div class="test-section">
                    <h6 class="mb-3">Test This Endpoint</h6>
                    
                    <!-- Token Input -->
                    <div class="mb-3">
                        <label class="form-label">Authorization Token</label>
                        <input type="text" class="form-control token-input" 
                               placeholder="Bearer token (get one from login section above)" 
                               data-endpoint="${index}">
                    </div>

                    <!-- URL Parameters for endpoints with {id} -->
                    ${endpoint.url.includes('{id}') ? `
                    <div class="mb-3">
                        <label class="form-label">User ID</label>
                        <input type="number" class="form-control" id="userId-${index}" 
                               placeholder="Enter user ID" value="1">
                    </div>
                    ` : ''}

                    <!-- Request Body for POST/PUT/PATCH -->
                    ${['POST', 'PUT', 'PATCH'].includes(endpoint.method) ? `
                    <div class="mb-3">
                        <label class="form-label">Request Body (JSON)</label>
                        <textarea class="form-control json-editor" rows="8" id="requestBody-${index}">${
                            endpoint.request_example ? formatJson(endpoint.request_example) : '{}'
                        }</textarea>
                    </div>
                    ` : ''}

                    <!-- Query Parameters for GET -->
                    ${endpoint.method === 'GET' && endpoint.url === '/api/users' ? `
                    <div class="mb-3">
                        <label class="form-label">Query Parameters</label>
                        <div class="row g-2">
                            <div class="col-md-3">
                                <input type="number" class="form-control" id="page-${index}" 
                                       placeholder="Page" value="1">
                            </div>
                            <div class="col-md-3">
                                <input type="number" class="form-control" id="limit-${index}" 
                                       placeholder="Limit" value="15">
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" id="sort-${index}">
                                    <option value="id">Sort by ID</option>
                                    <option value="name">Sort by Name</option>
                                    <option value="email">Sort by Email</option>
                                    <option value="created_at">Sort by Created</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <input type="text" class="form-control" id="search-${index}" 
                                       placeholder="Search term">
                            </div>
                        </div>
                    </div>
                    ` : ''}

                    <button class="btn btn-test" onclick="testEndpoint(${index})">
                        <span class="spinner-border spinner-border-sm loading-spinner"></span>
                        Test ${endpoint.method} ${endpoint.title}
                    </button>

                    <!-- Response Area -->
                    <div class="mt-3">
                        <label class="form-label">Response</label>
                        <div class="response-area" id="response-${index}">
                            Click "Test" button to see response...
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `).join('');

    // Apply syntax highlighting
    Prism.highlightAll();
}

// Get authentication token
async function getAuthToken() {
    const email = document.getElementById('loginEmail').value;
    const password = document.getElementById('loginPassword').value;
    const spinner = document.querySelector('.loading-spinner');
    
    try {
        spinner.style.display = 'inline-block';
        
        // Call real login endpoint
        const response = await axios.post(API_BASE_URL + '/api/login', {
            email: email,
            password: password
        }, {
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            }
        });
        
        const token = response.data.token;
        currentToken = token;
        
        document.getElementById('apiToken').value = token;
        document.getElementById('tokenResult').style.display = 'block';
        
        // Update all token inputs
        document.querySelectorAll('.token-input').forEach(input => {
            input.value = token;
        });
        
        showToast('Login successful! Token ready for API testing.', 'success');
        
    } catch (error) {
        console.error('Login error:', error);
        const errorMessage = error.response?.data?.message || 
                           error.response?.data?.errors?.email?.[0] || 
                           error.message;
        showToast('Login failed: ' + errorMessage, 'danger');
    } finally {
        spinner.style.display = 'none';
    }
}

// Copy token to clipboard
function copyToken() {
    const tokenInput = document.getElementById('apiToken');
    tokenInput.select();
    document.execCommand('copy');
    showToast('Token copied to clipboard!', 'success');
}

// Test API endpoint
async function testEndpoint(index) {
    const endpoint = endpoints[index];
    const token = document.querySelector(`[data-endpoint="${index}"]`).value;
    const responseArea = document.getElementById(`response-${index}`);
    const spinner = document.querySelector(`#endpoint-${index} .loading-spinner`);
    
    if (!token) {
        showToast('Please provide an authorization token', 'warning');
        return;
    }
    
    try {
        spinner.style.display = 'inline-block';
        responseArea.textContent = 'Loading...';
        
        // Build URL
        let url = endpoint.url;
        if (url.includes('{id}')) {
            const userId = document.getElementById(`userId-${index}`).value;
            if (!userId) {
                throw new Error('User ID is required');
            }
            url = url.replace('{id}', userId);
        }
        
        // Add query parameters for GET requests
        if (endpoint.method === 'GET' && endpoint.url === '/api/users') {
            const params = new URLSearchParams();
            const page = document.getElementById(`page-${index}`)?.value;
            const limit = document.getElementById(`limit-${index}`)?.value;
            const sort = document.getElementById(`sort-${index}`)?.value;
            const search = document.getElementById(`search-${index}`)?.value;
            
            if (page) params.append('page', page);
            if (limit) params.append('limit', limit);
            if (sort) params.append('sort', sort);
            if (search) {
                params.append('search', JSON.stringify({
                    filters: [
                        { field: 'name', operator: 'like', value: `%${search}%` }
                    ]
                }));
            }
            
            if (params.toString()) {
                url += '?' + params.toString();
            }
        }
        
        // Prepare request config
        const config = {
            method: endpoint.method,
            url: API_BASE_URL + url,
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json',
                'Content-Type': 'application/json',
            }
        };
        
        // Add request body for POST/PUT/PATCH
        if (['POST', 'PUT', 'PATCH'].includes(endpoint.method)) {
            const requestBodyElement = document.getElementById(`requestBody-${index}`);
            if (requestBodyElement) {
                try {
                    config.data = JSON.parse(requestBodyElement.value);
                } catch (e) {
                    throw new Error('Invalid JSON in request body: ' + e.message);
                }
            }
        }
        
        // Make request
        const response = await axios(config);
        
        // Display response
        const responseData = {
            status: response.status,
            statusText: response.statusText,
            headers: response.headers,
            data: response.data
        };
        
        responseArea.innerHTML = `
            <div class="d-flex align-items-center mb-2">
                <span class="status-indicator status-${response.status}"></span>
                <strong>${response.status} ${response.statusText}</strong>
            </div>
            <pre class="mb-0"><code class="language-json">${formatJson(response.data)}</code></pre>
        `;
        
        Prism.highlightElement(responseArea.querySelector('code'));
        
    } catch (error) {
        console.error('API test error:', error);
        
        let errorData = {
            status: error.response?.status || 'Network Error',
            statusText: error.response?.statusText || 'Request Failed',
            message: error.message,
            data: error.response?.data || null
        };
        
        responseArea.innerHTML = `
            <div class="d-flex align-items-center mb-2">
                <span class="status-indicator status-${error.response?.status || '500'}"></span>
                <strong class="text-danger">${errorData.status} ${errorData.statusText}</strong>
            </div>
            <pre class="mb-0"><code class="language-json">${formatJson(errorData)}</code></pre>
        `;
        
        Prism.highlightElement(responseArea.querySelector('code'));
        
    } finally {
        spinner.style.display = 'none';
    }
}

// Smooth scrolling for navigation
document.addEventListener('click', function(e) {
    if (e.target.matches('.nav-link[href^="#"]')) {
        e.preventDefault();
        const target = document.querySelector(e.target.getAttribute('href'));
        if (target) {
            target.scrollIntoView({ behavior: 'smooth', block: 'start' });
            
            // Update active nav item
            document.querySelectorAll('.nav-link').forEach(link => link.classList.remove('active'));
            e.target.classList.add('active');
        }
    }
});
</script>
@endpush